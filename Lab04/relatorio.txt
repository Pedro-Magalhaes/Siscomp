ALUNO: Pedro Felipe Santos Magalhães – 1611074



QUESTÃO 1) Usando processos, escreva um programa C que implemente o problema do
produtor/consumidor.
O produtor e o consumidor devem ser filhos de um processo pai.
O produtor deve produzir dados (números inteiros pseudo-aleatórios) a cada 1 segundo
colocando-os em uma fila (buffer, implementação circular).
O consumidor deve retirar dados da fila a cada 2 segundos.
O tamanho máximo da fila deve ser de 8 elementos (MAXFILA) e tanto o produtor como o
consumidor devem produzir/consumir 64 elementos (números inteiros de 1 a 64, por
exemplo).
Usar as funções pause() para o processo dormir e kill (pid, SIGCONT) para acordar o outro
processo.
-----------------------------------------------------
ARQUIVO.C
/*Lab01.c*/
#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#define MAXFILA 8
#define MAXPRODUZIDO 64
int main (void)
{
	

int pid_produtor,pid_consumidor,status;
int segmento,segmento2,segmento3, *pids,*vetor;
char *sigPos; 
// aloca a memória compartilhada
segmento = shmget (IPC_PRIVATE, sizeof (int)*MAXFILA, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
// associa a memória compartilhada ao processo
vetor = (int *) shmat (segmento, 0, 0);

segmento2 = shmget (IPC_PRIVATE, sizeof (int)*2, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
// associa a memória compartilhada ao processo
//pid[0]= pid_produtor
//pid[1]=pid_consumidor
pids = (int*) shmat (segmento2, 0, 0);

segmento3 = shmget (IPC_PRIVATE, sizeof (char)*4, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
// associa a memória compartilhada ao processo
sigPos = (char*) shmat (segmento3, 0, 0);
sigPos[0]=0;//flag para impedir concorrencia ao gravar na memoria
//0->ninguem usando memoria 1->memoria em uso
sigPos[1]=0; //proxima posiçao a ser lida
sigPos[2]=0; //proxima posição a ser escrita
sigPos[3]=0;//numero de elementos no vetor
	
	pid_produtor=fork();	
	if (pid_produtor != 0) {
			pids[0]=pid_produtor;
			pid_consumidor=fork();			
			if (pid_consumidor != 0){	
			/*	Tinha colocado o pids[1]=pid_consumidor e deu erro porque o pai e o filho estavam alterando
				simultaneamente e o pids[1] ficava sempre 0, acho que porque o filho alterava depois do pai
				assim quando o consumidor era pausado ele pausava o programa inteiro porque passava 0 como pid
				pro kill()*/
				pids[1]=pid_consumidor;
				waitpid( -1, &status, 0);/* wait for child to exit */
				printf("1o terminado\n");
				waitpid( -1, &status, 0);/* wait for child to exit */
				printf("tudo terminado\n");
			}else{ //consumidor 
				int i;	
				int aux;//auxiliar para guardar o valor lido da memoria e libera-la para escrita antes de dar print			
				for(i=0;i<MAXPRODUZIDO;i++)
				{	

					//sleep(2);								
					
					if(sigPos[3]== 0 ) //se tiver poucos elementos pauso o consumidor
					{	
						
						//para garantir que ele nao pausa na ultima iteracao()
						if( i<MAXPRODUZIDO-2){
							//printf("Consumidor sera pausado\n");

							kill(pids[0],SIGCONT);//(pids[0]=pid_produtor)										
							kill(pids[1],SIGSTOP);//parando o processo consumidor (pid[1]=pid_consumidor)
						}
						else{
							kill(pids[0],SIGCONT);//(pids[0]=pid_produtor)
						}
					} 
					//se estiver na metade me certifico que o produtor esta produzindo
					else if(sigPos[3]<MAXFILA/2 - 1)
					{
						//printf("Produtor sinalizando para acordar\n");
						kill(pids[0],SIGCONT);//(pids[0]=pid_produtor)
					}

					if(sigPos[3]> 0 || i==MAXPRODUZIDO-1) //tem mais que 0 elementos ou eh a ultima iteracao
					{
						if(sigPos[0])//alguem usando memoria
						{
							printf("Consumidor Nao consegue acessar\n");
							i--;
							continue;
						}
						else
						{							
							sigPos[0]=1; //trava o acesso ao vetor
							aux=vetor[sigPos[1]];	//pega a memoria											
							vetor[sigPos[1]]=-1;
							sigPos[3]--; //numero de elementos no vetor -1
							sigPos[1]=(sigPos[1]+1)%MAXFILA;
							sigPos[0]=0; //desbloqueia o vetor
							printf("consumido %d\n",aux);
						}
					}
					else{
						i--;
						continue;
					}

				}
			
			
				printf("Consumidor terminou trabalho\n");
				kill(pids[0],SIGCONT);//(pids[0]=pid_produtor)
				exit(1);
			}
	} else { //produtor
		
		int i;
				for(i=0;i<MAXPRODUZIDO;i++)
				{
					//sleep(1);
					if(sigPos[3]==MAXFILA)
					{	
						
						//para garantir que ele nao pausa na ultima iteracao(necessario realmente no consumidor)
						if( i<MAXPRODUZIDO-1){
							//printf("Produtor sera pausado\n");		
							kill(pids[1],SIGCONT);//(pid[1]=pid_consumidor)									
							kill(pids[0],SIGSTOP);//(pids[0]=pid_produtor)
						}
						else{
							kill(pids[1],SIGCONT);//(pid[1]=pid_consumidor)	
						}
					}
					//se estiver muito cheio, vou garantir que o consumidor esta trabalhando
					else if(sigPos[3]>MAXFILA-2) 
					{
						//printf("Consumidor sinalizado  para acordar\n");
						kill(pids[1],SIGCONT);//(pid[1]=pid_consumidor)
					}
					
					if(sigPos[3]<MAXFILA) //testando se o numero de elementos ainda eh menor que o max
					{
						if(sigPos[0])
						{
							printf("Produtor Nao consegue acessar\n");
							i--;
							continue;
						}
						else
						{
							sigPos[0]=1;
							vetor[sigPos[2]]=i;
							sigPos[3]++; //numero de elementos no vetor +1
							sigPos[2]=(sigPos[2]+1)%MAXFILA;
							sigPos[0]=0;
						}
						
					}
					else
					{
						i--;
						continue;
					}
					
				}
				printf("produdor terminou trabalho\n");
				kill(pids[1],SIGCONT);
		exit(1);
	}

	

	return 0;
}




-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO
//alguns warnings pq usai char como indice do vetor da lista
pedro@debianPedro:~/Documentos/PUC/Siscomp/Laboratorios/Lab04$ gcc -Wall Lab01.c 
Lab01.c: In function ‘main’:
Lab01.c:90:17: warning: array subscript has type ‘char’ [-Wchar-subscripts]
        aux=vetor[sigPos[1]]; //pega a memoria
                 ^
Lab01.c:91:13: warning: array subscript has type ‘char’ [-Wchar-subscripts]
        vetor[sigPos[1]]=-1;
             ^
Lab01.c:147:13: warning: array subscript has type ‘char’ [-Wchar-subscripts]
        vetor[sigPos[2]]=i;
             ^
pedro@debianPedro:~/Documentos/PUC/Siscomp/Laboratorios/Lab04$ ./a.out 


-----------------------------------------------------
RESULTADO
pedro@debianPedro:~/Documentos/PUC/Siscomp/Laboratorios/Lab04$ ./a.out 
consumido 0
consumido 1
consumido 2
consumido 3
consumido 4
consumido 5
consumido 6
consumido 7
consumido 8
consumido 9
consumido 10
consumido 11
consumido 12
consumido 13
consumido 14
consumido 15
consumido 16
consumido 17
consumido 18
consumido 19
consumido 20
consumido 21
consumido 22
consumido 23
consumido 24
consumido 25
consumido 26
consumido 27
consumido 28
consumido 29
consumido 30
consumido 31
consumido 32
consumido 33
consumido 34
consumido 35
consumido 36
consumido 37
consumido 38
consumido 39
consumido 40
consumido 41
consumido 42
consumido 43
consumido 44
consumido 45
consumido 46
consumido 47
consumido 48
consumido 49
consumido 50
consumido 51
consumido 52
consumido 53
consumido 54
consumido 55
consumido 56
produdor terminou trabalho
consumido 57
consumido 58
consumido 59
consumido 60
consumido 61
consumido 62
consumido 63
Consumidor terminou trabalho
1o terminado
tudo terminado


-----------------------------------------------------
CONCLUSÃO
Foi um trabalho interessante, com algumas dificuldades consegui fazer o programa rodar certinho(ainda que
raramente os dois processos fiquem pausados e o programa nao termina) mesmo sem usar o sleep nos processos.
Implementei uma maneira de um processo bloquear o outro enquanto um tivesse usando a memória, mas como
o processo Consumidor dava print quando consumia um elemento do vetor o processo Produtor ficava bloqueado
muitas vezes, assim decidi criar uma variavel auxiliar e fiz o print depois de setar a flag pra false e o
programa passou a nao imprimir nenhum conflito de acesso na memoria(coloquei print caso o processo fosse bloqueado).
Outra questão foi que quando meu processo consumidor estava se pausando el pausava o programa inteiro,
percebi que o que ocorria era que atribui minha variavel compartilhada que guardava pid do filho antes de 
testar para ver se estava no filho ou no Pai, assim o pai atribuia o valor correto mas o filho colocava 0,
assim ele pausava todos os processos.(foi bom pra descobrir que o kill com pid 0 pausa todos em um certo range).
Tive alguns Deadlocks porque os processos pausavam juntos na ultima iteração resolvi isso com um if dentro
da condição que pausava os processos, e coloquei alguns SIGCONT sempre que um processo pausava pra me certificar
que ao menos um estaria rodando sempre. Fiz uma condição nos dois processos pra acordar o outro se o vetor estivesse
muito cheio ou muito vazio pra aumentar a concorrencia, caso contrario eles ficam alternando e só acordam quando
um pausa e sinaliza ao outro para continuar.
Incrivel também como um print afeta a concorrencia, o consumidor pracaticamente não é pausado porque imprime o que pega da memória enquanto o produtor não tem print praticamente. Outro detalhe é que eu estava imprimindo quando os processos
eram pausados, e no tempo de imprimir a condição do if já havia mudado. Por exemplo, o consumidor via que nao havia 
elementos no vetor, mas o produtor estava produzindo, no tempo que o consumidor imprimia que ia pausar, o produtor 
pausava e o pragrama ficava todo pausado.

