ALUNO: Pedro Felipe Santos Magalhães – 1611074

QUESTÃO 1) 
Execute o programa Corrida de Sapo algumas vezes e
analise os resultados sobre a ordem de chegada dos
sapos. Obs: compile com a opção –lpthread

-----------------------------------------------------
ARQUIVO.C

// não coloquei pq é igual ao enunciado e igual a da questão 2
// só muda pq não tem o mutex



-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO
c1611074@geriba ~/Documents/pedro/Siscomp/Lab10$gcc -Wall -lpthread -o l01 Lab01
c1611074@geriba ~/Documents/pedro/Siscomp/Lab10$./l01


-----------------------------------------------------
RESULTADO
c1611074@geriba ~/Documents/pedro/Siscomp/Lab10$./l02
Corrida iniciada ... 
Sapo 0 pulou  
Sapo 2 pulou  
Sapo 1 pulou  
Sapo 3 pulou  
Sapo 2 pulou  
Sapo 4 pulou  
Sapo 3 pulou  
Sapo 1 pulou  
Sapo 2  chegou na posicaoo 1 com 2 pulos 
Sapo 0 pulou  
Sapo 4 pulou  
Sapo 3 pulou  
Sapo 1  chegou na posicaoo 2 com 2 pulos 
Sapo 0  chegou na posicaoo 3 com 2 pulos  <<<<< Chegaram na mesma posição
Sapo 3  chegou na posicaoo 3 com 3 pulos  <<<<<
Sapo 4 pulou  
Sapo 4  chegou na posicaoo 5 com 3 pulos 

 Acabou!!



-----------------------------------------------------
CONCLUSÃO
Sem controle de região critica na hora de printar a posição do sapo
outro sapo pode estar junto e printar sua posição antes da variavel 
ser atualizada, ficando assim aparentemente na mesma posição quando
na verdade a variavel apenas não tinha sido atualizada ainda
--------------------------------------------------------------

QUESTÃO 2) 
Usando mutex, modifique o programa Corrida de Sampo
para que o problema identificado anteriormente não
ocorra. 

-----------------------------------------------------
ARQUIVO.C
/**Lab02.c **/

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>


#define NUM_THREADS 5
#define PULO_MAXIMO 100
#define DESCANSO_MAXIMO 1
#define DISTANCIA_PARA_CORRER 100

static int classificacao = 1;
static pthread_mutex_t lock;
static char *resp[200];
static int cont = 0;

void* Correr (void *sapo);

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int pthread_mutex_init(pthread_mutex_t *mutex, 
                        const pthread_mutexattr_t *mutexattr);

int pthread_mutex_lock (pthread_mutex_t *mutex);
int pthread_mutex_unlock (pthread_mutex_t *mutex);
int pthread_mutex_destroy (pthread_mutex_t *mutex);

int main( void )
{
    classificacao = 1;
    pthread_t threads[NUM_THREADS];
    int t;
    printf("Corrida iniciada ... \n");
    for(t=0;t < NUM_THREADS;t++){
        pthread_create(&threads[t], NULL, Correr, (void *) t);
    }
    for(t=0;t < NUM_THREADS; t++)  {
        pthread_join(threads[t],NULL); 
    }
    printf("\n Acabou!!\n");
    pthread_exit(NULL);
}

void *Correr(void *sapo)
{
    int pulos = 0;
    int distanciaJaCorrida = 0;
    int pos_chegada;
    while (distanciaJaCorrida <= DISTANCIA_PARA_CORRER)
    {
        int pulo = rand() % PULO_MAXIMO;
        distanciaJaCorrida += pulo;
        pulos++;
        printf("Sapo %d pulou  \n", (int)sapo);
        int descanso = rand() % DESCANSO_MAXIMO;
        sleep(descanso);
    }
    pthread_mutex_lock( &mutex ); // alo mutex!!!!
    printf("Sapo %d  chegou na posicaoo %d com %d pulos \n", (int)sapo,
           classificacao, pulos);
    cont++;
    classificacao++;
    pthread_mutex_unlock( &mutex ); // adeus Mutex!!!
    pthread_exit(NULL);
}


-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

c1611074@geriba ~/Documents/pedro/Siscomp/Lab10$gcc -Wall -lpthread -o l02 Lab02
c1611074@geriba ~/Documents/pedro/Siscomp/Lab10$./l02

-----------------------------------------------------
RESULTADO
c1611074@geriba ~/Documents/pedro/Siscomp/Lab10$./l02
Corrida iniciada ... 
Sapo 1 pulou  
Sapo 0 pulou  
Sapo 3 pulou  
Sapo 2 pulou  
Sapo 4 pulou  
Sapo 0 pulou  
Sapo 1 pulou  
Sapo 3 pulou  
Sapo 2 pulou  
Sapo 4 pulou  
Sapo 0  chegou na posicaoo 1 com 2 pulos 
Sapo 1  chegou na posicaoo 2 com 2 pulos 
Sapo 3 pulou  
Sapo 2  chegou na posicaoo 3 com 2 pulos 
Sapo 4  chegou na posicaoo 4 com 2 pulos 
Sapo 3  chegou na posicaoo 5 com 3 pulos 




-----------------------------------------------------
CONCLUSÃO
O problema foi resolvido ao colocar um mutex na hora de atualizar a variavel
de posição dos sapos
--------------------------------------------------------------

QUESTÃO 3) 
 Usando threads, escreva um programa C que implemente o
problema do produtor/consumidor. O produtor deve produzir
dados (números inteiros pseudo-aleatórios) a cada 1 segundo
colocando-os em uma fila (buffer, implementação circular). O
consumidor deve retirar dados da fila a cada 2 segundos. O
tamanho máximo da fila deve ser de 8 elementos (MAXFILA) e
tanto o produtor como o consumidor devem produzir/consumir
64 elementos (números inteiros de 1 a 64, por exemplo)
evitando condições de corrida. Variáveis compartilhadas entre
threads são simplesmente variáveis globais.
-----------------------------------------------------
ARQUIVO.C

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/msg.h>
#include <sys/ipc.h>
#include <pthread.h>
#include <ctype.h>
#include <sys/sem.h>
#define MAXFILA 8
#define MAXPRODUZIDO 20


pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int pthread_mutex_init(pthread_mutex_t *mutex, 
                        const pthread_mutexattr_t *mutexattr);

int pthread_mutex_lock (pthread_mutex_t *mutex);
int pthread_mutex_unlock (pthread_mutex_t *mutex);
int pthread_mutex_destroy (pthread_mutex_t *mutex);

union semun
{
	int	val;
	struct semid_ds *buf;
	ushort *array;
};
// inicializa o valor do semáforo
int setSemValue(int semId);
// remove o semáforo
void delSemValue( int semId);
// operação P
int semaforoP( int semId);
//operação V
int semaforoV( int semId);

int minhaFila[MAXFILA];
int proxPosConsumidor = 0;
int proxPosProdutor = 0;
int	semProdId;
int	semConsId;

void* Produtor (void *produtor){
    int i;
    for(i=0;i<MAXPRODUZIDO;i++)
    {        
        semaforoP(semProdId);
        pthread_mutex_lock( &mutex );        
        minhaFila[proxPosProdutor] = i; //não estou usando numeros aleatorios
        proxPosProdutor = (proxPosProdutor + 1) % MAXFILA;
        printf("\nPRODUTOR: enviado %d\n",i);
        semaforoV(semConsId);
        pthread_mutex_unlock( &mutex );    
        sleep(1);
    }

    printf("produtor acabou\n");
    pthread_exit(NULL);
}


void* Consumidor (void *consumidor){
        int i;
        int aux;					
		for(i=0;i<MAXPRODUZIDO;i++)
		{	
			sleep(2);
            semaforoP(semConsId);	
            pthread_mutex_lock( &mutex );   
            aux=minhaFila[proxPosConsumidor];
            printf("Mensagem recebida, %d \n",aux);
            proxPosConsumidor = (proxPosConsumidor + 1) % MAXFILA;
            semaforoV(semProdId);
            pthread_mutex_unlock( &mutex );
		}	
        pthread_exit(NULL);
}

int main (void)
{
	pthread_t threads[2];
    int t;

    semProdId = semget (IPC_PRIVATE, 1, 0666 | IPC_CREAT);
	setSemValue(semProdId);
    semConsId = semget (IPC_PRIVATE, 1, 0666 | IPC_CREAT);
	setSemValue(semConsId);

    pthread_create(&threads[0], NULL, Consumidor, (void *) 0);
	pthread_create(&threads[1], NULL, Produtor, (void *) 1);


    for(t=0;t < 2; t++)  {
        pthread_join(threads[t],NULL); 
    }
	
    printf("\nTudo terminado\n");	
	
	return 0;
}


int setSemValue(int semId)
{
	union semun semUnion;
	semUnion.val = MAXFILA;
	return semctl(semId, 0, SETVAL, semUnion);
}
void delSemValue(int semId)
{
	union semun semUnion;
	semctl(semId, 0, IPC_RMID, semUnion);
}
int semaforoP( int semId)
{
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = -	1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
	return	0;
}
int semaforoV(int semId)
{
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = 1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
	return	0;
}

-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

c1611074@geriba ~/Documents/pedro/Siscomp/Lab10$gcc -Wall -lpthread -o l03 Lab03
c1611074@geriba ~/Documents/pedro/Siscomp/Lab10$./l03
-----------------------------------------------------
RESULTADO


PRODUTOR: enviado 0

PRODUTOR: enviado 1
Mensagem recebida, 0 

PRODUTOR: enviado 2

PRODUTOR: enviado 3
Mensagem recebida, 1 

PRODUTOR: enviado 4

PRODUTOR: enviado 5
Mensagem recebida, 2 

PRODUTOR: enviado 6

PRODUTOR: enviado 7
Mensagem recebida, 3 

PRODUTOR: enviado 8

PRODUTOR: enviado 9
Mensagem recebida, 4 

PRODUTOR: enviado 10

PRODUTOR: enviado 11
Mensagem recebida, 5 

PRODUTOR: enviado 12

PRODUTOR: enviado 13
Mensagem recebida, 6 

PRODUTOR: enviado 14
Mensagem recebida, 7 

PRODUTOR: enviado 15
Mensagem recebida, 8 

PRODUTOR: enviado 16
Mensagem recebida, 9 

PRODUTOR: enviado 17
Mensagem recebida, 10 

PRODUTOR: enviado 18
Mensagem recebida, 11 

PRODUTOR: enviado 19
produtor acabou
Mensagem recebida, 12 
Mensagem recebida, 13 
Mensagem recebida, 14 
Mensagem recebida, 15 
Mensagem recebida, 16 
Mensagem recebida, 17 
Mensagem recebida, 18 
Mensagem recebida, 19 

Tudo terminado


-----------------------------------------------------
CONCLUSÃO
Acabei utilizando semaforos pra fazer o bloqueio entre os consumidores e outro
pra fazer entre os produtores, quando na verdade seria mais simples utilizar a variavel
de condição. O bloqueio da região critica foi feito por mutex.

-----------------------------------------------------

QUESTÃO 4)Bônus (use variáveis de condição)
4) Modifique o programa anterior, para que haja 2 (ou mais)
threads consumidor e 2 (ou mais) threads produtor. O que muda
em relação ao uso do mutex e da variável de condição? 
-----------------------------------------------------
ARQUIVO.C
 /*** Lab04.c ***/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <pthread.h>
#include <ctype.h>

#define MAXFILA 8
#define MAXPRODUZIDO 20 //coloquei um numero menor pra imprimir menos coisas
#define  N_THREADS 2

int mypow(int , int);
int pthread_mutex_init(pthread_mutex_t *mutex, 
                        const pthread_mutexattr_t *mutexattr);
int pthread_mutex_lock (pthread_mutex_t *mutex);
int pthread_mutex_unlock (pthread_mutex_t *mutex);
int pthread_mutex_destroy (pthread_mutex_t *mutex);

int minhaFila[MAXFILA];
int proxPosConsumidor = 0;
int proxPosProdutor = 0;
int estoque = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t can_prod = PTHREAD_COND_INITIALIZER;
pthread_cond_t can_consume = PTHREAD_COND_INITIALIZER;


void* Produtor (void* produtor){
    int i;
    for(i=0;i<MAXPRODUZIDO / N_THREADS ;i++)
    {        
        int enviando = (i+1) * mypow(-1,(int)produtor+1) ;//não estou usando numeros aleatorios

        pthread_mutex_lock( &mutex ); // inicio area critica
        if (estoque >= MAXFILA)
        {
            printf("Produtor %d indo dormir\n",(int)produtor);
            pthread_cond_wait(&can_prod,&mutex);
        }else if (estoque > MAXFILA / 2){//acorda consumidor
           pthread_cond_signal(&can_consume);
        }   
        estoque++;     
        minhaFila[proxPosProdutor] = enviando; 
        proxPosProdutor = (proxPosProdutor + 1) % MAXFILA;
        printf("\nPRODUTOR %d : enviado %d\n",(int)produtor,enviando);        
        pthread_mutex_unlock( &mutex ); // fim area critica    
        sleep(1);
    }

    printf("produtor %d acabou ****\n",(int)produtor);
    pthread_exit(NULL);
}


void* Consumidor (void* consumidor){
        int i;
        int aux;        				
		for(i=0;i<MAXPRODUZIDO / N_THREADS;i++)
		{	
			sleep(2);
            
            pthread_mutex_lock( &mutex );  // inicio area critica
            if(estoque == 0)
            {
                pthread_cond_wait(&can_consume,&mutex);
                //return;
            }else if (estoque < MAXFILA / 2){ //acorda produtor
                pthread_cond_signal(&can_prod);
            }
            estoque--;
            aux=minhaFila[proxPosConsumidor];
            proxPosConsumidor = (proxPosConsumidor + 1) % MAXFILA;
            printf("Consumidor %d recebeu %d \n",(int)consumidor,aux);
            
            pthread_mutex_unlock( &mutex );// fim area critica
		}	
        pthread_exit(NULL);
}

int main (void)
{
	pthread_t t_produtor[2];
    pthread_t t_consumidor[2];
    int t;

    // criando threads
    for (t = 0; t < N_THREADS; t++)
    {sleep(1);
        pthread_create(&t_produtor[t], NULL, Produtor, (void *) t);
    }
    for (t = 0; t < N_THREADS; t++)
    {sleep(1);
        pthread_create(&t_consumidor[t], NULL, Consumidor, (void *) t);
    }
    // threads criadas

    // join
    for(t=0;t < 2; t++)  {
        pthread_join(t_produtor[t],NULL); 
    }
    for(t=0;t < 2; t++)  {
        pthread_join(t_consumidor[t],NULL); 
    }
    // endJoin
	
    printf("\nTudo terminado\n");	
	
	return 0;
}


int mypow(int base, int expoente){ //fiz uma função de potenciação
    int result;
    if (base == 0)
    {
        return 0;
    }
    if (expoente == 0)
    {
        return 1;
    }
    if (expoente == 1)
    {
        return base;
    }
    result = base;
    expoente--;
    for (;expoente>0;expoente--){
        result = result * result;
    }

    return result;
}

-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

pedro@pedro-TA990FXE:~/Documents/Siscomp/Lab10$ ./l04 

-----------------------------------------------------
RESULTADO


pedro@pedro-TA990FXE:~/Documents/Siscomp/Lab10$ ./l04 

PRODUTOR 0 : enviado -1

PRODUTOR 1 : enviado 1

PRODUTOR 0 : enviado -2

PRODUTOR 0 : enviado -3

PRODUTOR 1 : enviado 2

PRODUTOR 0 : enviado -4

PRODUTOR 1 : enviado 3
Consumidor 0 recebeu -1 

PRODUTOR 0 : enviado -5

PRODUTOR 1 : enviado 4
Produtor 0 indo dormir
Consumidor 1 recebeu 1 

PRODUTOR 1 : enviado 5
Consumidor 0 recebeu -2 

PRODUTOR 1 : enviado 6
Consumidor 1 recebeu -3 

PRODUTOR 1 : enviado 7
Consumidor 0 recebeu 2 

PRODUTOR 1 : enviado 8
Consumidor 1 recebeu -4 

PRODUTOR 1 : enviado 9
Consumidor 0 recebeu 3 

PRODUTOR 1 : enviado 10
Consumidor 1 recebeu -5 
produtor 1 acabou ****
Consumidor 0 recebeu 4 
Consumidor 1 recebeu 5 
Consumidor 0 recebeu 6 
Consumidor 1 recebeu 7 
Consumidor 0 recebeu 8 

PRODUTOR 0 : enviado -6

PRODUTOR 0 : enviado -7
Consumidor 1 recebeu 9 
Consumidor 0 recebeu 10 

PRODUTOR 0 : enviado -8

PRODUTOR 0 : enviado -9
Consumidor 1 recebeu -6 
Consumidor 0 recebeu -7 

PRODUTOR 0 : enviado -10
produtor 0 acabou ****
Consumidor 1 recebeu -8 
Consumidor 0 recebeu -9 
Consumidor 1 recebeu -10 

Tudo terminado

-----------------------------------------------------
CONCLUSÃO
O mutex permaneceu no inicio da região critica, mas agora com a variavel de
condição quando a condição de fila cheia acontece a região é liberada mesmo
com o thread "indo dormir" no meio da região. Fiquei com uma dúvida com relação
a volta do estado de wait do thread. No meu programa eu "acordo" o produtor quando
a fila esta com menos da metade de elementos, o que acontece com ele na hora que 
volta a executar? a região critica é bloqueada pra ele usar ou ele volta dentro
da região critica sem testar se pode utilizar e pode ocorrer concorrencia?
Porque eu testei colocando um mutex_lock depois da thread_wait e o programa 
ficou bloqueado.

-----------------------------------------------------