ALUNO: Pedro Felipe Santos Magalhães – 1611074


QUESTÃO 1)  Execute o programa dado (exemplo de uso 
de semáforos) e verifique / explique sua 
execução.
-----------------------------------------------------
ARQUIVO.C

/*** CÓDIGO IDENTICO AO DADO NA TAREFA****/
#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
union semun
{
	int	val;
	struct semid_ds *buf;
	ushort *array;
};
// inicializa o valor do semáforo
int setSemValue(int semId);
// remove o semáforo
void delSemValue( int semId);
// operação P
int semaforoP( int semId);
//operação V
int semaforoV( int semId);

int main ( int argc, char* argv[])
{
	int i;
	char letra = 'o';
	int	semId;
	if	(argc > 1)
	{
		semId = semget (8752, 1, 0666 | IPC_CREAT);
		setSemValue(semId);
		letra =	'x';
		sleep (2);
	}
	else
	{
		while
		((semId = semget (8752, 1, 0666)) < 0)
		{
			putchar ('.');
			fflush(stdout);
			sleep (1);
		}
	}
	for	(i=0; i<10; i++)
	{
		semaforoP(semId);
		putchar (toupper(letra)); fflush(stdout);
		sleep (rand() %3);
		putchar (letra); fflush(stdout);
		semaforoV(semId);
		sleep (rand() %2);
	}
	printf ("\nProcesso %d terminou\n", getpid());
	if(argc > 1)
	{
		sleep(10);
		delSemValue(semId);
	}
	return 0;
}
int setSemValue(int semId)
{
	union semun semUnion;
	semUnion.val = 1;
	return semctl(semId, 0, SETVAL, semUnion);
}
void delSemValue(int semId)
{
	union semun semUnion;
	semctl(semId, 0, IPC_RMID, semUnion);
}
int semaforoP( int semId)
{
	struct
	sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = -	1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
	return	0;
}
int semaforoV(int semId)
{
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = 1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
	return	0;
}


-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO
c1611074@joatinga ~/Documents/pedro/Siscomp/Lab08$gcc -Wall -o l01 lab01.c 
c1611074@joatinga ~/Documents/pedro/Siscomp/Lab08$./l01 &
[1] 2973
.c1611074@joatinga ~/Documents/pedro/Siscomp/Lab08$./.l01 .a

-----------------------------------------------------
RESULTADO

.c1611074@joatinga ~/Documents/pedro/Siscomp/Lab08$./.l01 .a
OoOoXxOoXxOoXxOoXxOoXxOoXxOoXxOoOo
XProcesso 2973 terminou
xXxXx
Processo 2980 terminou
[1]+  Done                    ./l01



-----------------------------------------------------
CONCLUSÃO
Apesar de os dois processos estarem concorrendo pela cpu, como as áreas criticas são
bloqueadas por semáforo os processos executam de forma síncrona, mesmo que um
deles esteja em sleep o outro fica bloqueado também no semáforo e só consegue imprimir
quando o processo que ativou o semáfora volta do sleep e imprime sua última letra.
Pode ocorrer de um imprimir mais de uma vez seguida dependendo do tempo de sleep dos 
processos após liberarem o semáforo e por isso o termino de cada processo pode variar.


/**********************************************************/
 2) Produtor-Consumidor
Escreva um programa formado por dois 
processos concorrentes, leitor e impressor, que 
compartilham uma área de trabalho (memória) 
executando um loop infinito. Para sincronizar as 
suas ações, eles fazem uso de semáforos. 

O processo leitor fica lendo caracteres da entrada 
padrão e colocando em um buffer de 16 
posições. Quando o buffer está cheio o processo 
impressor deve imprimi-lo na saída padrão.
-----------------------------------------------------
ARQUIVO.C

/*Lab02.c*/

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/wait.h>

#define EVER ;;
#define BUFFER 16

union semun
{
	int	val;
	struct semid_ds *buf;
	ushort *array;
};
// inicializa o valor do semáforo
int setSemValue(int semId);
// remove o semáforo
void delSemValue( int semId);
// operação P
int semaforoP( int semId);
//operação V
int semaforoV( int semId);

int main ( int argc, char* argv[])
{
	int i;
	int	semId;
	int pid,segmento;
	int *vetor;
	
	// aloca a memória compartilhada
	segmento = shmget (IPC_PRIVATE, sizeof (int)*BUFFER+1, IPC_CREAT | 											IPC_EXCL | S_IRUSR | S_IWUSR);
	// associa a memória compartilhada ao processo
	vetor = (int *) shmat (segmento, 0, 0);
	vetor[16]='\n'; //soh pra pular linha
		semId = semget (8752, 1, 0666 | IPC_CREAT);
		if (semId != 0)
		{
			setSemValue(semId);
		}
		else
		{
			printf("saindo erro, semId= %d \n",semId);
			exit(-1);
		}
			

	if((pid=fork())==0) //filho-produtor
	{
		for(EVER)
		{		
			semaforoP(semId);
			for(i=0;i<BUFFER;i++)
			{
				vetor[i]=getchar ();
				if(vetor[i]=='\n')
				{
					i--;
					continue;
				}
			}
			semaforoV(semId);
			sleep (rand() %2);
		}
	}
	else
	{//pai-consumidor
		for(EVER)
		{
			semaforoP(semId);
			for(i=0;i<BUFFER+1;i++)
			{
				putchar(vetor[i]);
			}
			fflush(stdout);
			semaforoV(semId);
			sleep (rand() %2);
			
		}
	}
	return 0;
}
int setSemValue(int semId)
{
	union semun semUnion;
	semUnion.val = 1;
	return semctl(semId, 0, SETVAL, semUnion);
}
void delSemValue(int semId)
{
	union semun semUnion;
	semctl(semId, 0, IPC_RMID, semUnion);
}
int semaforoP( int semId)
{
	struct
	sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = -	1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
	return	0;
}
int semaforoV(int semId)
{
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = 1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
	return	0;
}

-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO


-----------------------------------------------------
RESULTADO

-----------------------------------------------------
CONCLUSÃO


/**********************************************************/
 3) Faça programas para alterar um valor de 
uma variável na memória compartilhada.
Um programa soma 1 à variável e o outro 
soma 5 à variável. Utilize semáforos para 
alterar a variável (região crítica).
-----------------------------------------------------
ARQUIVO.C


-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO


-----------------------------------------------------
RESULTADO




-----------------------------------------------------
CONCLUSÃO


/**********************************************************/




